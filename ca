#!/bin/bash
#
# This script wraps OpenSSL commands to set up and 
# operate a private certifiate authority.
#
# The MIT License (MIT)
# 
# Copyright (c) 2009,2015 Spotwise
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#  

#
# This script is intended to be run without arguments. However, it is
# also possible to provide arguments to perform some standard
# functions. Note that there is virtually no error-checking of
# arguments. Example commands to set up a certificate hierarchy:
#
# ./ca -c ca -C SE -P Somewhere -L City -O Example -U IT -E cert@example.com -R http://cert.example.com
# ./ca -c sub -S Contoso
# ./ca -c cert -S contoso -N www.contoso.com -A www.contoso.com,contoso.com,www.example.com,example.com
#

############# Constants and variables ###############

path=$(cd `dirname $0` && pwd)
data=$path/data
include=$path/include
root=$data/root
organisation=''

# Read organisation name from the configuration file. If the
# configuration file has not yet been created, the organisation
# name will be set as part of setting up the root certificate
# authority.
if [ -f "$data/template.conf" ]; then
    organisation=`cat "$data/template.conf" | grep 0.organizationName_default | awk '{ print $3; }'`
fi


################# Source functions ##################

. $include/misc.sh
. $include/list_all.sh
. $include/setup_ca.sh
. $include/create_sub_ca.sh
. $include/create_certificate.sh
. $include/renew_certificate.sh
. $include/revoke_certificate.sh
. $include/update_crl.sh

###################### Main #########################

# Read arguments
while getopts ":c:C:P:L:O:U:E:R:S:N:A:" opt; do
  case $opt in
    c)
    cmd=$OPTARG
    ;;
    C)
    country=$OPTARG
    ;;
    P)
    province=$OPTARG
    ;;
    O)
    organisation=$OPTARG
    ;;
    L)
    locality=$OPTARG
    ;;
    U)
    unit=$OPTARG
    ;;
    E)
    email=$OPTARG
    ;;
    R)
    url=$OPTARG
    ;;
    S)
    sub=$OPTARG
    ca=$OPTARG
    ;;
    N)
    cn=$OPTARG
    ;;
    A)
    alt=$OPTARG
    ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit
      ;;
  esac
done

case $cmd in
    ca)
    if [ ! -f $data/template.conf ]; then
        setup_ca
    fi
    exit
    ;;
    sub)
    create_sub_ca
    exit
    ;;
    cert)
    create_certificate
    exit
    ;;
esac

# Setup the certificate authority if it hasn't been initialised
if [ ! -f $data/template.conf ]; then
    setup_ca
fi

# Main menu
while :
do
    clear
    echo
    echo "   M A I N - M E N U"
    echo 
    echo "1. List authorities and certificates"
    echo "2. Create subordinate certificate authority"
    echo "3. Create new certificate"
    echo "4. Renew certificate"
    echo "5. Revoke certificate"
    echo "6. Update certificate revocation lists"
    echo "7. Backup certificate hierarchy"
    echo "8. Completely wipe the certificate hierarchy"
    echo "9. Quit"
    echo
    echo -n "Please select option  "
    read -e opt

    case $opt in
        1) list_all;;
        2) create_sub_ca;;
        3) create_certificate;;
        4) renew_certificate;;
        5) revoke_certificate;;
        6) update_crl;;
        7) backup;;
        8) clean;;
        9) exit;;
        *) echo 
            echo "$opt is an invaild option.";
            echo "Press [enter] key to continue. . .";
            read e;;
    esac
done


